// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  email            String       @unique
  name             String?
  image            String?
  password         String
  isActive         Boolean      @default(true)
  hasResetPassword Boolean      @default(false)
  role             String       @default("USER")
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  Article          Article[]
  Portofolio       Portofolio[]
}

model Article {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  slug            String            @unique
  resume          String?
  content         String
  image           String?
  isPublished     Boolean           @default(false)
  author          User              @relation(fields: [authorId], references: [id])
  authorId        String            @db.ObjectId
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  ArticleCategory ArticleCategory[]
}

model ArticleCategory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  article    Article  @relation(fields: [articleId], references: [id])
  articleId  String   @db.ObjectId
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Category {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  ArticleCategory ArticleCategory[]
}

model Portofolio {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  slug            String            @unique
  resume          String?
  content         String
  image           String?
  designPrice     Int
  buildPrice      Int
  size            String
  projectType     String
  location        String
  client          String
  material        String
  isPublished     Boolean           @default(false)
  author          User              @relation(fields: [authorId], references: [id])
  authorId        String            @db.ObjectId
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  PortofolioStyle PortofolioStyle[]
}

model PortofolioStyle {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  portofolio   Portofolio  @relation(fields: [portofolioId], references: [id])
  portofolioId String      @db.ObjectId
  style        StyleDesign @relation(fields: [styleId], references: [id])
  styleId      String      @db.ObjectId
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model StyleDesign {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  description     String?
  image           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  PortofolioStyle PortofolioStyle[]
}
